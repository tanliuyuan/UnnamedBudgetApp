/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Expense as PrismaExpense,
  Category as PrismaCategory,
  Budget as PrismaBudget,
} from "@prisma/client";

export class ExpenseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ExpenseCountArgs, "select">): Promise<number> {
    return this.prisma.expense.count(args);
  }

  async expenses(args: Prisma.ExpenseFindManyArgs): Promise<PrismaExpense[]> {
    return this.prisma.expense.findMany(args);
  }
  async expense(
    args: Prisma.ExpenseFindUniqueArgs
  ): Promise<PrismaExpense | null> {
    return this.prisma.expense.findUnique(args);
  }
  async createExpense(args: Prisma.ExpenseCreateArgs): Promise<PrismaExpense> {
    return this.prisma.expense.create(args);
  }
  async updateExpense(args: Prisma.ExpenseUpdateArgs): Promise<PrismaExpense> {
    return this.prisma.expense.update(args);
  }
  async deleteExpense(args: Prisma.ExpenseDeleteArgs): Promise<PrismaExpense> {
    return this.prisma.expense.delete(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.expense
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getBudget(parentId: string): Promise<PrismaBudget | null> {
    return this.prisma.expense
      .findUnique({
        where: { id: parentId },
      })
      .budget();
  }
}
