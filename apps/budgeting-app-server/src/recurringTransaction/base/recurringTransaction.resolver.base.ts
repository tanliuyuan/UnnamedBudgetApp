/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RecurringTransaction } from "./RecurringTransaction";
import { RecurringTransactionCountArgs } from "./RecurringTransactionCountArgs";
import { RecurringTransactionFindManyArgs } from "./RecurringTransactionFindManyArgs";
import { RecurringTransactionFindUniqueArgs } from "./RecurringTransactionFindUniqueArgs";
import { CreateRecurringTransactionArgs } from "./CreateRecurringTransactionArgs";
import { UpdateRecurringTransactionArgs } from "./UpdateRecurringTransactionArgs";
import { DeleteRecurringTransactionArgs } from "./DeleteRecurringTransactionArgs";
import { Category } from "../../category/base/Category";
import { User } from "../../user/base/User";
import { RecurringTransactionService } from "../recurringTransaction.service";
@graphql.Resolver(() => RecurringTransaction)
export class RecurringTransactionResolverBase {
  constructor(protected readonly service: RecurringTransactionService) {}

  async _recurringTransactionsMeta(
    @graphql.Args() args: RecurringTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RecurringTransaction])
  async recurringTransactions(
    @graphql.Args() args: RecurringTransactionFindManyArgs
  ): Promise<RecurringTransaction[]> {
    return this.service.recurringTransactions(args);
  }

  @graphql.Query(() => RecurringTransaction, { nullable: true })
  async recurringTransaction(
    @graphql.Args() args: RecurringTransactionFindUniqueArgs
  ): Promise<RecurringTransaction | null> {
    const result = await this.service.recurringTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RecurringTransaction)
  async createRecurringTransaction(
    @graphql.Args() args: CreateRecurringTransactionArgs
  ): Promise<RecurringTransaction> {
    return await this.service.createRecurringTransaction({
      ...args,
      data: {
        ...args.data,

        category: args.data.category
          ? {
              connect: args.data.category,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => RecurringTransaction)
  async updateRecurringTransaction(
    @graphql.Args() args: UpdateRecurringTransactionArgs
  ): Promise<RecurringTransaction | null> {
    try {
      return await this.service.updateRecurringTransaction({
        ...args,
        data: {
          ...args.data,

          category: args.data.category
            ? {
                connect: args.data.category,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RecurringTransaction)
  async deleteRecurringTransaction(
    @graphql.Args() args: DeleteRecurringTransactionArgs
  ): Promise<RecurringTransaction | null> {
    try {
      return await this.service.deleteRecurringTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Category, {
    nullable: true,
    name: "category",
  })
  async getCategory(
    @graphql.Parent() parent: RecurringTransaction
  ): Promise<Category | null> {
    const result = await this.service.getCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: RecurringTransaction
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
