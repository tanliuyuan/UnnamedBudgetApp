/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RecurringTransactionService } from "../recurringTransaction.service";
import { RecurringTransactionCreateInput } from "./RecurringTransactionCreateInput";
import { RecurringTransaction } from "./RecurringTransaction";
import { RecurringTransactionFindManyArgs } from "./RecurringTransactionFindManyArgs";
import { RecurringTransactionWhereUniqueInput } from "./RecurringTransactionWhereUniqueInput";
import { RecurringTransactionUpdateInput } from "./RecurringTransactionUpdateInput";

export class RecurringTransactionControllerBase {
  constructor(protected readonly service: RecurringTransactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RecurringTransaction })
  async createRecurringTransaction(
    @common.Body() data: RecurringTransactionCreateInput
  ): Promise<RecurringTransaction> {
    return await this.service.createRecurringTransaction({
      data: {
        ...data,

        category: data.category
          ? {
              connect: data.category,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startDate: true,
        amount: true,
        endDate: true,
        description: true,
        intervalType: true,

        category: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RecurringTransaction] })
  @ApiNestedQuery(RecurringTransactionFindManyArgs)
  async recurringTransactions(
    @common.Req() request: Request
  ): Promise<RecurringTransaction[]> {
    const args = plainToClass(RecurringTransactionFindManyArgs, request.query);
    return this.service.recurringTransactions({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startDate: true,
        amount: true,
        endDate: true,
        description: true,
        intervalType: true,

        category: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RecurringTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async recurringTransaction(
    @common.Param() params: RecurringTransactionWhereUniqueInput
  ): Promise<RecurringTransaction | null> {
    const result = await this.service.recurringTransaction({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startDate: true,
        amount: true,
        endDate: true,
        description: true,
        intervalType: true,

        category: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RecurringTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRecurringTransaction(
    @common.Param() params: RecurringTransactionWhereUniqueInput,
    @common.Body() data: RecurringTransactionUpdateInput
  ): Promise<RecurringTransaction | null> {
    try {
      return await this.service.updateRecurringTransaction({
        where: params,
        data: {
          ...data,

          category: data.category
            ? {
                connect: data.category,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startDate: true,
          amount: true,
          endDate: true,
          description: true,
          intervalType: true,

          category: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RecurringTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRecurringTransaction(
    @common.Param() params: RecurringTransactionWhereUniqueInput
  ): Promise<RecurringTransaction | null> {
    try {
      return await this.service.deleteRecurringTransaction({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startDate: true,
          amount: true,
          endDate: true,
          description: true,
          intervalType: true,

          category: {
            select: {
              id: true,
            },
          },

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
