/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RecurringTransaction as PrismaRecurringTransaction,
  Category as PrismaCategory,
  User as PrismaUser,
} from "@prisma/client";

export class RecurringTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RecurringTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.recurringTransaction.count(args);
  }

  async recurringTransactions(
    args: Prisma.RecurringTransactionFindManyArgs
  ): Promise<PrismaRecurringTransaction[]> {
    return this.prisma.recurringTransaction.findMany(args);
  }
  async recurringTransaction(
    args: Prisma.RecurringTransactionFindUniqueArgs
  ): Promise<PrismaRecurringTransaction | null> {
    return this.prisma.recurringTransaction.findUnique(args);
  }
  async createRecurringTransaction(
    args: Prisma.RecurringTransactionCreateArgs
  ): Promise<PrismaRecurringTransaction> {
    return this.prisma.recurringTransaction.create(args);
  }
  async updateRecurringTransaction(
    args: Prisma.RecurringTransactionUpdateArgs
  ): Promise<PrismaRecurringTransaction> {
    return this.prisma.recurringTransaction.update(args);
  }
  async deleteRecurringTransaction(
    args: Prisma.RecurringTransactionDeleteArgs
  ): Promise<PrismaRecurringTransaction> {
    return this.prisma.recurringTransaction.delete(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.recurringTransaction
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.recurringTransaction
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
